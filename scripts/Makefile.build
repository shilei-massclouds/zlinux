# SPDX-License-Identifier: GPL-2.0
# Building

src := $(obj)

PHONY := __build
__build:

always-y :=

include scripts/Kbuild.include

# The filename Kbuild has precedence over Makefile
kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),\
	$(kbuild-dir)/Kbuild,\
	$(kbuild-dir)/Makefile)

# Include target source directory
include $(kbuild-file)

include scripts/Makefile.lib

subdir-builtin := $(sort $(filter %/built-in.a, $(real-obj-y)))

# Do not include hostprogs rules unless needed.
hostprogs := $(sort $(hostprogs))
ifneq ($(hostprogs),)
include scripts/Makefile.host
endif

targets-for-builtin := $(extra-y)

ifneq ($(strip $(lib-y) $(lib-m) $(lib-)),)
targets-for-builtin += $(obj)/lib.a
endif

ifdef need-builtin
targets-for-builtin += $(obj)/built-in.a
endif

$(warning r: __build: $(obj), $(targets-for-builtin), $(subdir-ym))
__build: $(if $(KBUILD_BUILTIN), $(targets-for-builtin)) \
	$(subdir-ym) $(always-y)
	$(warning e: __build: $(obj): $^)
	@:

quiet_cmd_ar_builtin = AR      $@
      cmd_ar_builtin = rm -f $@; $(AR) cDPrST $@ $(real-prereqs)

$(warning r: $(obj)/built-in.a: $(real-obj-y))
$(obj)/built-in.a: $(real-obj-y) FORCE
	$(warning $@ -> $(real-obj-y))
	$(call if_changed,ar_builtin)

# To build objects in subdirs, we need to descend into the directories
$(warning r: subdir-builtin $(obj): $(subdir-builtin) )
$(subdir-builtin): $(obj)/%/built-in.a: $(obj)/% ;
	$(warning e: subdir-builtin: ($(subdir-builtin)): $^)

quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@
cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<

# Built-in and composite module parts
$(obj)/%.o: $(src)/%.c $(recordmcount_source) $(objtool_dep) FORCE
	$(warning e: cc_o_c: $(c_flags))
	$(call if_changed_rule,cc_o_c)

quiet_cmd_cpp_s_S = CPP $(quiet_modtag) $@
cmd_cpp_s_S = $(CPP) $(a_flags) -o $@ $<

$(obj)/%.s: $(src)/%.S FORCE
	$(call if_changed_dep,cpp_s_S)

quiet_cmd_as_o_S = AS $(quiet_modtag) $@
cmd_as_o_S = $(CC) $(a_flags) -c -o $@ $<

define rule_cc_o_c
    $(call cmd_and_fixdep,cc_o_c)
endef

define rule_as_o_S
	$(call cmd_and_fixdep,as_o_S)
endef

$(obj)/%.o: $(src)/%.S $(objtool_dep) FORCE
	$(warning e: $(cmd_as_o_S))
	$(call if_changed_rule,as_o_S)

# Linker scripts preprocessor (.lds.S -> .lds)
quiet_cmd_cpp_lds_S = LDS $@
cmd_cpp_lds_S = $(CPP) $(cpp_flags) -P -U$(ARCH) \
				-D__ASSEMBLY__ -DLINKER_SCRIPT -o $@ $<

$(obj)/%.lds: $(src)/%.lds.S FORCE
	$(call if_changed_dep,cpp_lds_S)

# Descending
# ---------------------------------------------------------------------------
PHONY += $(subdir-ym)
$(warning r: subdir-ym:)
$(subdir-ym):
	$(warning e: subdir-ym: ($@))
	$(Q)$(MAKE) $(build)=$@ \
		need-builtin=$(if $(filter $@/built-in.a, $(subdir-builtin)),1)

PHONY += FORCE
FORCE:

.PHONY: $(PHONY)
